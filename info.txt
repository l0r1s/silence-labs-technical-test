There are 3 test challenges. You could take at least one.


# 1: ZK knowledge proof

Please find the attached Python source file. Please implement the same primitive in Rust. 

Please use any suitable from RustCrypto. 


# 2: Simple web application: Wasm + web sockets.

A Rust library that should be compiled to Wasm and export one function (Typescript syntax)

wsPing(endpoint: string, message: string): Promise<string>

This function should establish a web socket connection to the "endpoint" and send the text message, receive a message, and return its content.

Any UI will be sufficient, but a simple test executed by nodejs/deno/bun would be OK. 

Rust + wasm-bindings + anything else you need.



# 3: Cloud sync-point.

Small web service with one endpoint: /wait-for-second-party/:unique-id

This endpoint allows two parties to sync. When one party makes a POST request, the response will be delayed until the second party requests the same URL. In other words, the first party is blocked until the second party arrives or a timeout occurs (let it be 10 seconds).

Rust: tokio + anything else you need.
